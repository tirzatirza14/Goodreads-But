{"version":3,"sources":["components/Card.js","components/CardList.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","state","backImage","divStyle","backgroundImage","this","className","readOrNot","style","Component","CardList","cards","filteredCards","map","card","key","name","chooser","Filter","type","onClick","filterChooser","App","handleInputJonathan","setState","filterItem","handleInputTirza","handleInputAll","filter","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAiCeA,G,4DA7Bd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAWF,EAAME,WAHA,E,qDASjB,IAAMC,EAAW,CAChBC,gBAAiB,OAASC,KAAKJ,MAAMC,UAAY,KAGhDI,EAAU,OAMX,MAL4B,SAAzBD,KAAKL,MAAMO,YACbD,GAAa,SAKb,yBAAKA,UAAU,QACY,iBAAzBD,KAAKL,MAAMO,UAA+B,yBAAKD,UAAU,cAAf,eAAiD,8BAClE,SAAzBD,KAAKL,MAAMO,UAAuB,yBAAKD,UAAU,eAAf,QAA2C,8BAC9E,yBAAKA,UAAYA,EAAWE,MAAOL,GAAnC,U,GAxBaM,cCkBJC,MAhBf,SAAkBV,GAEjB,IAAIW,EAAQX,EAAMY,cAAcC,KAAI,SAACC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKC,IAAKC,KAAMF,EAAKE,KAAMd,UAAWY,EAAKZ,UAAWK,UAAWO,EAAKP,UAAWU,QAASH,EAAKG,aAG/G,OACC,yBAAKX,UAAU,YACbK,ICDQO,MATf,SAAgBlB,GACf,OACC,yBAAKM,UAAU,UACd,4BAASa,KAAK,SAASC,QAASpB,EAAMoB,SAAUpB,EAAMqB,iBC8F1CC,E,kDA9Fd,WAAYtB,GAAQ,IAAD,8BAChB,cAAMA,IAyDTuB,oBAAsB,WACrB,EAAKC,SAAS,CAAEC,WAAY,cA3DV,EA8DnBC,iBAAmB,WAClB,EAAKF,SAAS,CAAEC,WAAY,WA/DV,EAkEnBE,eAAiB,WAChB,EAAKH,SAAS,CAAEC,WAAY,MAjE1B,EAAKxB,MAAQ,CACZU,MAAO,CACN,CACAK,KAAM,yBACNd,UAAW,uIACXK,UAAW,OACXU,QAAS,WACTF,IAAK,KAEL,CACAC,KAAM,aACHd,UAAW,kGACXK,UAAW,OACXU,QAAS,QACTF,IAAK,KAER,CACAC,KAAM,aACHd,UAAW,mEACXK,UAAW,eACXU,QAAS,WACTF,IAAK,KAER,CAACC,KAAM,iBACJd,UAAW,2FACXK,UAAU,OACVU,QAAQ,QACRF,IAAK,KAER,CACAC,KAAM,WACHd,UAAW,qGACXK,UAAW,OACXU,QAAS,WACTF,IAAK,KAER,CACAC,KAAM,WACJd,UAAW,mEACVK,UAAU,OACVU,QAAS,QACTF,IAAK,KAER,CACAC,KAAM,6BACHd,UAAW,2FACXK,UAAW,OACXU,QAAS,WACTF,IAAK,MAITU,WAAY,IAtDG,E,qDAsET,IAAD,OACJb,EAAgBP,KAAKJ,MAAMU,MAAMiB,QAAO,SAACd,GAC5C,OAAOA,EAAKG,QAAQY,SAAS,EAAK5B,MAAMwB,eAGzC,OACI,yBAAKnB,UAAU,OACd,yBAAKA,UAAU,SACZ,sDACA,yBAAKA,UAAY,WACf,kBAAC,EAAD,CAAQe,cAAc,MAAMD,QAASf,KAAKsB,iBAC3C,kBAAC,EAAD,CAAQN,cAAc,oBAAoBD,QAASf,KAAKkB,sBACxD,kBAAC,EAAD,CAAQF,cAAc,iBAAiBD,QAASf,KAAKqB,qBAI5D,kBAAC,EAAD,CAAUd,cAAeA,S,GAvFXH,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fab88d01.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './Card.css';\n\nclass Card extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbackImage: props.backImage\n\t\t};\n\t}\n\n  render() {\n\n  \tconst divStyle = {\n  \t\tbackgroundImage: 'url(' + this.state.backImage + ')'\n\t};\n\n\tlet className='Book';\n\t\t if (this.props.readOrNot === 'read') {\n\t  \t\tclassName += ' read';\n \t\t}\n\n\n    return (\n    \t<div className='Card'>\n    \t\t{this.props.readOrNot === 'reading this' ? <div className='banner now'>Now Reading</div> :  <div/>} \n    \t\t{this.props.readOrNot === 'soon' ? <div className='banner soon'>Soon</div> :  <div/>} \n    \t\t<div className= {className} style={divStyle}> </div>\n    \t</div>\n    )\n  }\n}\n\nexport default Card;\n","import React from \"react\";\nimport './Card.css';\nimport\tCard from './Card.js'\nimport '../App.css';\n\nfunction CardList(props) {\n\n\tlet cards = props.filteredCards.map((card) => {\n\t\treturn <Card key={card.key} name={card.name} backImage={card.backImage} readOrNot={card.readOrNot} chooser={card.chooser} />\n\t})\n\n    return (\n    \t<div className=\"CardList\">\n    \t\t{cards}\n\t      </div>\n\n    \t\n    )\n  \n}\n\nexport default CardList;\n","import React from 'react';\nimport '../App.css';\n\nfunction Filter(props) {\n\treturn (\n\t\t<div className=\"Filter\">\n\t\t\t<button  type=\"button\" onClick={props.onClick}>{props.filterChooser}</button>\n\t\t</div>\n\n\t)\n} \n\nexport default Filter;","import React, { Component } from 'react';\nimport './App.css';\nimport\tCardList from './components/CardList.js'\nimport Filter from './components/Filter.js'\n\nclass App extends Component {\n\tconstructor(props) {\n\t  \tsuper(props);\n\t  \tthis.state = {\n\t  \t\tcards: [\n\t  \t\t\t{\n\t  \t\t\tname: \"Fellowship of The Ring\", \n\t  \t\t\tbackImage: 'https://upload.wikimedia.org/wikipedia/en/thumb/8/8e/The_Fellowship_of_the_Ring_cover.gif/220px-The_Fellowship_of_the_Ring_cover.gif',\n\t  \t\t\treadOrNot: 'soon',\n\t  \t\t\tchooser: 'Jonathan',\n\t  \t\t\tkey: \"0\",\n\t  \t\t\t}, \n\t  \t\t\t{\n\t  \t\t\tname: 'Hyperspace',\n\t\t      \tbackImage: 'https://bosilawhat.files.wordpress.com/2014/04/44c4aa56cf140f960990af910db2ecd9.jpg?w=285&h=440',\n\t\t      \treadOrNot: 'soon',\n\t\t      \tchooser: 'Tirza',\n\t\t      \tkey: \"1\",\n\t  \t\t\t},\n\t  \t\t\t{\n\t  \t\t\tname: 'The Hobbit',\n\t\t      \tbackImage: 'https://images-na.ssl-images-amazon.com/images/I/91b0C2YNSrL.jpg',\n\t\t      \treadOrNot: 'reading this',\n\t\t      \tchooser: 'Jonathan',\n\t\t      \tkey: \"2\",\n\t  \t\t\t},\n\t  \t\t\t{name: 'Catch and Kill',\n\t\t      \tbackImage: 'https://storage.googleapis.com/afs-prod/media/e5a09f89107544588a7cf5ab9aae9f7a/2850.jpeg',\n\t\t      \treadOrNot:'read',\n\t\t      \tchooser:'Tirza',\n\t\t      \tkey: \"3\",\n\t  \t\t\t},\n\t  \t\t\t{\n\t  \t\t\tname: 'Walkaway',\n\t\t      \tbackImage: 'https://upload.wikimedia.org/wikipedia/en/6/65/Walkaway_%28a_Cory_Doctorow_novel%29_book_cover.jpg',\n\t\t      \treadOrNot: 'read',\n\t\t      \tchooser: 'Jonathan',\n\t\t      \tkey: \"4\",\n\t  \t\t\t},\n\t  \t\t\t{\n\t  \t\t\tname: 'Educated',\n\t\t     \tbackImage: 'https://images-na.ssl-images-amazon.com/images/I/81XR45UdqkL.jpg',\n\t\t      \treadOrNot:'read',\n\t\t      \tchooser: 'Tirza',\n\t\t      \tkey: \"5\",\n\t  \t\t\t},\n\t  \t\t\t{\n\t  \t\t\tname: 'High Mountains of Portugal',\n\t\t      \tbackImage: 'https://images-na.ssl-images-amazon.com/images/I/51vqI45mx-L._SX326_BO1,204,203,200_.jpg',\n\t\t      \treadOrNot: 'read',\n\t\t      \tchooser: 'Jonathan',\n\t\t      \tkey: \"6\",\n\t  \t\t\t}\n\t  \t\t],\n\n\t  \t\tfilterItem: ''\n\t  \t}\n\t  }\n\n\thandleInputJonathan = () => {\n\t\tthis.setState({ filterItem: 'Jonathan'})\n\t}\n\n\thandleInputTirza = () => {\n\t\tthis.setState({ filterItem: 'Tirza'})\n\t}\n\n\thandleInputAll = () => {\n\t\tthis.setState({ filterItem: ''})\n\t}\n\n\trender() {\n\t\tlet filteredCards = this.state.cards.filter((card) => {\n\t\t\treturn card.chooser.includes(this.state.filterItem)\n\t\t})\n\n\t\treturn (\n\t    \t<div className=\"App\">\n\t\t    \t<div className=\"Title\">\n\t\t     \t\t <h1>Goodreads, but just us</h1>\n\t\t     \t\t <div className = \"Filters\">\n\t\t     \t\t \t <Filter filterChooser=\"All\" onClick={this.handleInputAll}/>\n\t\t\t     \t\t <Filter filterChooser=\"Jonathan's Choice\" onClick={this.handleInputJonathan}/>\n\t\t\t     \t\t <Filter filterChooser=\"Tirza's Choice\" onClick={this.handleInputTirza}/>\n\t\t     \t\t </div>\n\t\t     \t</div>\n\n\t\t\t\t<CardList filteredCards={filteredCards}/>\n\t       </div>\n\t  ); \n\t}\n}\n\t  \n\t\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}